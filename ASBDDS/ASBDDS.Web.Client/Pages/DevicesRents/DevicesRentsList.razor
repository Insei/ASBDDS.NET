@page "/devices/rents"
@using System.Net.Http.Json
@using ASBDDS.Shared.Models.Responses
@inject IHttpService _httpClient
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudTable Items="@DevicesRents" Dense="@dense" Hover="@hover" Loading="@_loading" Bordered="@bordered" Striped="@striped" Filter="new Func<DeviceRentUserResponse,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices Rents List</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@ShowCreateDialog" aria-label="add"></MudIconButton>
        <MudText Class="small">Add Device Rent</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Created</MudTh>
        <MudTh>IPXE Url</MudTh>
        <MudTh>Serial</MudTh>
        <MudTh>Mac Address</MudTh>
        <MudTh>Device state</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (context.Closed == null)
        {
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Created">@context.Created</MudTd>
            <MudTd DataLabel="IPXEUrl">@context.IPXEUrl</MudTd>
            <MudTd DataLabel="Serial">@context.Serial</MudTd>
            <MudTd DataLabel="MacAddress">@context.MacAddress</MudTd>
            <MudTd DataLabel="DeviceState">@context.DeviceState</MudTd>
            <MudTd Style="white-space: nowrap; width: 1%;" DataLabel="Options">
                <MudMenu Label="Options" Size="Size.Small" Dense="true" FullWidth="true" Direction="Direction.Start">
                    <MudMenuItem OnClick="@(() => ShowUpdateDialog(context))">Edit</MudMenuItem>
                    <MudMenuItem OnClick="@(() => DeleteDeviceRent(context))">Release</MudMenuItem>
                    <MudMenuItem OnClick="@(() => PowerOffDeviceByRent(context))">Power Off</MudMenuItem>
                    <MudMenuItem OnClick="@(() => PowerOnDeviceByRent(context))">Power On</MudMenuItem>
                    <MudMenuItem OnClick="@(() => ShowConsoleOutputDialog(context))">Console</MudMenuItem>
                </MudMenu>
            </MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<SnackBars @ref="_snackBars"></SnackBars>
@code {
    private bool _loading;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private DeviceRentUserResponse selectedItem1 = null;
    private HashSet<DeviceRentUserResponse> selectedItems = new HashSet<DeviceRentUserResponse>();
    private SnackBars _snackBars;

    private IEnumerable<DeviceRentUserResponse>
        DevicesRents = new List<DeviceRentUserResponse>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateTableData();
    }

    private async Task<int> UpdateTableData(bool StateChanged = false)
    {
        var responseBody = await _httpClient.Get<ApiResponse<List<DeviceRentUserResponse>>>("api/devices/rents");

        DevicesRents = responseBody.Data;

        _loading = false;
        if (StateChanged)
            StateHasChanged();
        return 0;
    }

    private async void ShowCreateDialog()
    {
        var dialog = _dialogService.Show<DevicesRentsCreateDialog>("Create Device Rent");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            _loading = true;
            await UpdateTableData(true);
        }
    }

    private async void ShowUpdateDialog(DeviceRentUserResponse device)
    {
        var parameters = new DialogParameters { ["DeviceRent"] = device };
        var dialog = _dialogService.Show<DevicesRentsUpdateDialog>("Edit Device", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            _loading = true;
            await UpdateTableData(true);
        }
    }
    
    private async void ShowConsoleOutputDialog(DeviceRentUserResponse device)
    {
        var parameters = new DialogParameters { ["DeviceRent"] = device };
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true};
        var dialog = _dialogService.Show<DevicesRentsConsoleOutputDialog>("Console log", parameters, dialogOptions);
    }

    private async void DeleteDeviceRent(DeviceRentUserResponse device)
    {
        var parameters = new DialogParameters();
        parameters.Add("EntityName", "device rent");

        var result = await _dialogService.Show<DeleteConfirmDialog>("Delete", parameters).Result;
        if (!result.Cancelled)
        {
            var apiResp = await _httpClient.Delete<ApiResponse<DeviceRentUserResponse>>("api/devices/rents/" + device.Id, null);
            if (apiResp == null || apiResp.Status.Code != 0)
            {
                if (apiResp != null)
                    _snackBars.ShowError(apiResp.Status.Message);
                else
                    _snackBars.ShowError("Unhandled error");
            }
            else
            {
                _loading = true;
                await UpdateTableData(true);
            }
        }
    }
    private async void PowerOffDeviceByRent(DeviceRentUserResponse device)
    {
        var parameters = new DialogParameters();
        parameters.Add("EntityName", "device");
        parameters.Add("Action", "Power off");

        var result = await _dialogService.Show<DeleteConfirmDialog>("Power off", parameters).Result;
        if (!result.Cancelled)
        {
            var apiResp = await _httpClient.Post<ApiResponse<DeviceRentUserResponse>>("api/devices/rents/" + device.Id + "/poweroff", null);
            if (apiResp == null || apiResp.Status.Code != 0)
            {
                if (apiResp != null)
                    _snackBars.ShowError(apiResp.Status.Message);
                else
                    _snackBars.ShowError("Unhandled error");
            }
            else
            {
                _loading = true;
                await UpdateTableData(true);
            }
        }
    }
    
    private async void PowerOnDeviceByRent(DeviceRentUserResponse device)
    {
        var parameters = new DialogParameters();
        parameters.Add("EntityName", "device");
        parameters.Add("Action", "Power on");

        var result = await _dialogService.Show<DeleteConfirmDialog>("Power on", parameters).Result;
        if (!result.Cancelled)
        {
            var apiResp = await _httpClient.Post<ApiResponse<DeviceRentUserResponse>>("api/devices/rents/" + device.Id + "/poweron", null);
            if (apiResp == null || apiResp.Status.Code != 0)
            {
                if (apiResp != null)
                    _snackBars.ShowError(apiResp.Status.Message);
                else
                    _snackBars.ShowError("Unhandled error");
            }
            else
            {
                _loading = true;
                await UpdateTableData(true);
            }
        }
    }

    private bool FilterFunc1(DeviceRentUserResponse device) => FilterFunc(device, searchString1);

    private bool FilterFunc(DeviceRentUserResponse device, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (device.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Serial.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.MacAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
