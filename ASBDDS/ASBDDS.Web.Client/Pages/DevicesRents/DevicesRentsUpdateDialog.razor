@using ASBDDS.Shared.Models.Requests
@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Models.Database.DataDb
@using Newtonsoft.Json
@using ASBDDS.Shared.Helpers
@using System.Text
@inject IHttpService httpClient

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_devRentAdminPutRequest.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Create">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public DeviceRentUserResponse DeviceRent { get; set; }

    private DeviceRentUserPutRequest _devRentAdminPutRequest;
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        _devRentAdminPutRequest = new DeviceRentUserPutRequest();
        _devRentAdminPutRequest.Name = DeviceRent.Name;
    }

    private async void Create()
    {
        var apiResp = await httpClient.Put<ApiResponse<DeviceRentUserResponse>>("api/devices/rents/" + DeviceRent.Id, _devRentAdminPutRequest);
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if (apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
            MudDialog.Close(DialogResult.Ok(true));
    }
}
