@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Dtos.DbConsole
@using ASBDDS.Shared.Dtos.SerialPortSettings
@using Microsoft.AspNetCore.Components
@using ASBDDS.Shared.Dtos
@inject IHttpService _httpClient
@inject IDialogService _dialogService
@inject IJSRuntime _js

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudTable Items="@_output" Dense="@true" Hover="@true" Height="350px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true">
            <HeaderContent>
                <MudTh>Message</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="message">@context.Text</MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => UpdateData(true))">Update</MudButton>
        <MudButton Color="Color.Primary" OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>

@code {

    private IEnumerable<ConsoleOutputDto> _output = new List<ConsoleOutputDto>();
    private bool Loading { get; set; }

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    [Parameter] public DeviceRentUserResponse DeviceRent { get; set; }

    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    private async Task<int> UpdateData(bool StateChanged = false)
    {
        Loading = true;
        var apiResp = await _httpClient.Get<ApiResponse<List<ConsoleOutputDto>>>("api/devices/rents/" + DeviceRent.Id + "/console/output");
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if (apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
        {
            _output = apiResp.Data.Select(o => new ConsoleOutputDto(){DateUtc = o.DateUtc.ToLocalTime(), Text = o.Text});
        }
        
        Loading = false;
        if(StateChanged)
            StateHasChanged();
        
        return 0;
    }

    protected override async void OnInitialized()
    {
        await UpdateData(true);
    }
}