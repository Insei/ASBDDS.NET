@using ASBDDS.Shared.Dtos.UserApiKey
@inject IHttpService _httpClient

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_userApiKeyCreateDto.Description" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Create">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public UserApiKeyCreateDto _userApiKeyCreateDto { get; set; }
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        _userApiKeyCreateDto = new UserApiKeyCreateDto();
    }

    private async void Create()
    {
        await _httpClient.Post<UserApiKeyDto>(
            "api/apikeys/", _userApiKeyCreateDto, 
            async _ =>
            {
                await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
            }, async response =>
            {
                await Task.Run(() => _snackBars.ShowError(response.Status.Message));
            });
    }
}