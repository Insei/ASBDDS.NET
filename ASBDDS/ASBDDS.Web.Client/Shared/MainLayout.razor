@inherits LayoutComponentBase
@using ASBDDS.Shared.Models.Responses
@using Blazored.LocalStorage
@using System.Threading
@inject IAuthenticationService _authenticationService
@inject ILocalStorageService _localStorageService
@inject IHttpService _httpClient
@inject AuthenticationStateProvider _authenticationStateProvider
<MudLayout>
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <AuthorizeView>
        <Authorized>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                <MudText Typo="Typo.h5" Class="ml-3">ASBDDS Web</MudText>
                <MudSpacer />
                @{
                    if (_projectsUserResponse != null)
                    {
                        <MudSelect Style="background: #fff;" Class="my-2" @bind-Value="@_projectGuidChangeHandler" @bind-Text="@_selectedProjectName" Variant="Variant.Outlined" Margin="Margin.Dense">
                            @{
                                foreach (var project in _projectsUserResponse)
                                {
                                    <MudSelectItem Value="@project.Id">@project.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    }
                }
                <MudIconButton OnClick="Logout" Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" />
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                <NavMenu />
            </MudDrawer>
            <MudMainContent>
                @Body
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            <MudContainer>
                <Login/>
            </MudContainer>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private IEnumerable<ProjectUserResponse> _projectsUserResponse;
    private Timer _timer;
    private ProjectUserResponse _currentProject = new ProjectUserResponse();
    private string _selectedProjectName { get; set; }
    private Guid _projectGuidChangeHandler
    {
        get
        {
            return _currentProject.Id;
        }
        set
        {
            OnProjectChange(value);
            _currentProject.Id = value;
        }
    }

    private async void CheckProjects(object state)
    {
        if (!await (_authenticationStateProvider as ApiAuthenticationStateProvider)?.TokenIsExpired())
        {
            await TryGetProjects();
            _timer.Dispose();
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async void Logout()
    {
        await _authenticationService.Logout();
    }

    private async Task TryGetProjects()
    {
        var apiResp = await _httpClient.Get<ApiResponse<List<ProjectUserResponse>>>("api/projects/");
        if (apiResp != null && apiResp.Status.Code == 0)
        {
            _projectsUserResponse = apiResp.Data;
            _currentProject = await _localStorageService.GetItemAsync<ProjectUserResponse>("CurrentProject");
            if (_currentProject == null || _projectsUserResponse.All(p => p.Id != _currentProject.Id))
            {
                var project = _projectsUserResponse.FirstOrDefault();
                if (project != null)
                {
                    _currentProject = new ProjectUserResponse() {Id = project.Id, Name = project.Name};
                    await _localStorageService.SetItemAsync("CurrentProject", _currentProject);
                    StateHasChanged();
                }
            }
            else
            {
                StateHasChanged();
            }
        }
    } 

    protected override async Task OnInitializedAsync()
    {
        if (!await (_authenticationStateProvider as ApiAuthenticationStateProvider)?.TokenIsExpired())
        {
            await TryGetProjects();
        }
        else
        {
            _timer = new Timer(CheckProjects, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
        }
    }

    private async void OnProjectChange(Guid id)
    {
        if (_currentProject.Id != Guid.Empty)
        {
            if (_projectsUserResponse != null)
            {
                var apiResp = await _httpClient.Get<ApiResponse<List<ProjectUserResponse>>>("api/projects/");
                if (apiResp != null && apiResp.Status.Code == 0)
                {
                    _projectsUserResponse = apiResp.Data;
                }
            }
            var project = _projectsUserResponse?.FirstOrDefault(p => p.Id == _currentProject.Id);
            if (project != null)
            {
                await _localStorageService.SetItemAsync<ProjectUserResponse>("CurrentProject", _currentProject);
                StateHasChanged();
            }
        }
    }

}