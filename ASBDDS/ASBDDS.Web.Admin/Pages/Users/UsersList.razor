@page "/users"
@using ASBDDS.Shared.Models.Responses
@inject IHttpService _httpClient
@inject IDialogService _dialogService

<MudTable Items="@_users" Dense="@true" Hover="@true" Loading="@_loading" Bordered="@true" Striped="@true" Filter="new Func<UserAdminResponse,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users List</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@ShowCreateDialog" aria-label="add"></MudIconButton>
        <MudText Class="small">Add User</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Created</MudTh>
        <MudTh>User name</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Last name</MudTh>
        <MudTh>Disabled</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Created">@context.Created.ToLocalTime()</MudTd>
        <MudTd DataLabel="UserName">@context.UserName</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Disabled">@context.Disabled</MudTd>
        <MudTd Style="white-space: nowrap; width: 1%;" DataLabel="Options">
            <MudMenu Label="Options" Size="Size.Small" Dense="true" FullWidth="true" Direction="Direction.Start">
                <MudMenuItem OnClick="@(() => ShowUpdateDialog(context))">Edit</MudMenuItem>
                <MudMenuItem OnClick="@(() => DisableUser(context))">Disable</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>
<SnackBars @ref="_snackBars"></SnackBars>
@code {
    private bool _loading;
    private string _searchString = "";
    private SnackBars _snackBars;

    private IEnumerable<UserAdminResponse> _users = new List<UserAdminResponse>();

    protected override async Task OnInitializedAsync()
    {
        await GetListDataFromServer();
    }

    private async Task GetListDataFromServer(bool stateHasChanged = false)
    {
        _loading = true;
        await _httpClient.Get<List<UserAdminResponse>>("api/admin/users/",
            async response =>
            {
                await Task.Run(() => _users = response.Data);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });

        _loading = false;
        if (stateHasChanged) 
            StateHasChanged();
    }

    private async void ShowCreateDialog()
    {
        var dialog = _dialogService.Show<UserCreateDialog>("Create User");
        var result = await dialog.Result;
        if (result.Cancelled) return;
        await GetListDataFromServer(true);
    }

    private async void ShowUpdateDialog(UserAdminResponse user)
    {
        var parameters = new DialogParameters { ["User"] = user };
        var dialog = _dialogService.Show<UserUpdateDialog>("Edit User", parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        await GetListDataFromServer(true);
    }

    private async void DisableUser(UserAdminResponse user)
    {
        var parameters = new DialogParameters {{"EntityName", "user"}};
        var result = await _dialogService.Show<DeleteConfirmDialog>("Delete", parameters).Result;
        if (result.Cancelled) return;
        
        await _httpClient.Delete("api/admin/users/" + user.Id,
            async _ =>
            {
                await GetListDataFromServer(true);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }

    private bool FilterFunc(UserAdminResponse user)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (user.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
}
