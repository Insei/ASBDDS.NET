@page "/devices"
@using ASBDDS.Shared.Models.Responses
@inject IHttpService _httpClient
@inject IDialogService _dialogService

<MudTable Items="@_devices" Dense="@true" Hover="@true" Loading="@_loading" LoadingProgressColor="Color.Info" Bordered="@true" Striped="@true" Filter="new Func<DeviceAdminResponse,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices List</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@ShowCreateDialog" aria-label="add"></MudIconButton>
        <MudText Class="small">Add Device</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>State</MudTh>
        <MudTh>Power</MudTh>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Manufacturer</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>Serial</MudTh>
        <MudTh>Mac Address</MudTh>
        <MudTh>Switch Port Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Style="white-space: nowrap; width: 1%;" DataLabel="Options">
            <MudMenu Label="Actions" Size="Size.Small" Dense="true" Direction="Direction.Start">
                <MudMenuItem OnClick="@(() => ShowUpdateDialog(context))">Edit</MudMenuItem>
                <MudMenuItem OnClick="@(() => DeleteDevice(context))">Delete</MudMenuItem>
                <MudMenuItem OnClick="@(() => PowerOffDevice(context))">Power off</MudMenuItem>
                <MudMenuItem OnClick="@(() => PowerOnDevice(context))">Power on</MudMenuItem>
            </MudMenu>
        </MudTd>
        <MudTd DataLabel="State">@context.MachineState</MudTd>
        <MudTd DataLabel="Power">@context.PowerState</MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
        <MudTd DataLabel="Model">@context.Model</MudTd>
        <MudTd DataLabel="Serial">@context.Serial</MudTd>
        <MudTd DataLabel="MacAddress">@context.MacAddress</MudTd>
        <MudTd DataLabel="SwitchPortId">@context.SwitchPortId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<SnackBars @ref="_snackBars"></SnackBars>
@code {
    private bool _loading;
    private string _searchString = "";
    private SnackBars _snackBars;

    private IEnumerable<DeviceAdminResponse> _devices = new List<DeviceAdminResponse>();

    protected override async Task OnInitializedAsync()
    {
        await GetListDataFromServer();
    }

    private async Task GetListDataFromServer(bool stateHasChanged = false)
    {
        _loading = true;
        await _httpClient.Get<List<DeviceAdminResponse>>("api/admin/devices/",
            async response =>
            {
                await Task.Run(() => _devices = response.Data);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });

        _loading = false;
        if (stateHasChanged) 
            StateHasChanged();
    }

    private async void ShowCreateDialog()
    {
        var dialog = _dialogService.Show<DeviceCreateDialog>("Create Device");
        var result = await dialog.Result;
        if (result.Cancelled) return;
        await GetListDataFromServer(true);
    }

    private async void ShowUpdateDialog(DeviceAdminResponse device)
    {
        var parameters = new DialogParameters { ["Device"] = device };
        var dialog = _dialogService.Show<DeviceUpdateDialog>("Edit Device", parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        await GetListDataFromServer(true);
    }

    private async void DeleteDevice(DeviceAdminResponse device)
    {
        var parameters = new DialogParameters {{"EntityName", "device"}};
        var result = await _dialogService.Show<DeleteConfirmDialog>("Delete", parameters).Result;
        if (result.Cancelled) return;
        
        await _httpClient.Delete<DeviceAdminResponse>("api/admin/devices/" + device.Id,
            async _ =>
            {
                await GetListDataFromServer(true);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
        });
    }

    private async void PowerOffDevice(DeviceAdminResponse device)
    {
        _loading = true;
        await _httpClient.Post<DeviceAdminResponse>("api/admin/devices/" + device.Id + "/poweroff", null,
            async _ =>
            {
                await GetListDataFromServer(true);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
    

    private async void PowerOnDevice(DeviceAdminResponse device)
    {
        _loading = true;
        await _httpClient.Post<ApiResponse<DeviceAdminResponse>>("api/admin/devices/" + device.Id + "/poweron", null,
            async _ =>
            {
                await GetListDataFromServer(true);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }

    private bool FilterFunc(DeviceAdminResponse device)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (device.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Model.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Manufacturer.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Serial.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.MacAddress.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
    }
}
