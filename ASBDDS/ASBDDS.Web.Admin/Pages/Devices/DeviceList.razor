@page "/devices"
@using System.Net.Http.Json
@using ASBDDS.Shared.Models.Responses
@inject HttpClient httpClient

<MudTable Items="@Devices" Dense="@dense" Hover="@hover" Loading="@_loading" Bordered="@bordered" Striped="@striped" Filter="new Func<DeviceAdminResponse,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Devices List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>BaseModel</MudTh>
        <MudTh>Serial</MudTh>
        <MudTh>MacAddress</MudTh>
        <MudTh>SwitchPortId</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Model">@context.Model</MudTd>
        <MudTd DataLabel="BaseModel">@context.BaseModel</MudTd>
        <MudTd DataLabel="Serial">@context.Serial</MudTd>
        <MudTd DataLabel="MacAddress">@context.MacAddress</MudTd>
        <MudTd DataLabel="SwitchPortId">@context.SwitchPortId</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool _loading;
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    private DeviceAdminResponse selectedItem1 = null;
    private DeviceAdminResponse selectedItem2 = null;
    private HashSet<DeviceAdminResponse>
    selectedItems = new HashSet<DeviceAdminResponse>();

    private IEnumerable<DeviceAdminResponse>
    Devices = new List<DeviceAdminResponse>();

    protected override async Task OnInitializedAsync()
    {
        var responseBody = await httpClient.GetFromJsonAsync<ApiResponse<List<DeviceAdminResponse>>>("api/admin/devices/");
        //foreach(var element in responseBody.Data)
        //{
        //    element.
        //}
        Devices = responseBody.Data;
        //StateHasChanged();

    }

    private bool FilterFunc1(DeviceAdminResponse device) => FilterFunc(device, searchString1);
    private bool FilterFunc2(DeviceAdminResponse device) => FilterFunc(device, searchString2);

    private bool FilterFunc(DeviceAdminResponse device, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (device.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Model.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.BaseModel.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Serial.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.MacAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }
}
