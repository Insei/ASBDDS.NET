@using ASBDDS.Shared.Models.Requests
@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Helpers
@using ASBDDS.Shared.Dtos.DbConsole
@using ASBDDS.Shared.Models.Database.DataDb
@using Microsoft.AspNetCore.Components
@using System.Linq
@inject IHttpService _httpClient

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_deviceAdminPutRequest.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Value="@_deviceAdminPutRequest.Manufacturer" Label="Manufacturer" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    var deviceHelper = new DeviceHelper();
                    foreach (var manufacturer in deviceHelper.GetManufacturers())
                    {
                        <MudSelectItem Value="@deviceHelper.GetManufacturer(manufacturer)"></MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Class="my-2" @bind-Value="@_deviceAdminPutRequest.Model" Label="Model" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    if (_deviceAdminPutRequest.Manufacturer != "")
                    {
                        var deviceHelper = new DeviceHelper();
                        var models = deviceHelper.GetModels(_deviceAdminPutRequest.Manufacturer);
                        foreach (var model in models)
                        {
                            var modelName = deviceHelper.GetModel(model);
                            <MudSelectItem Value="@modelName"></MudSelectItem>
                        }
                    }
                }
            </MudSelect>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_deviceAdminPutRequest.Serial" Label="Serial" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_deviceAdminPutRequest.MacAddress" Label="Mac Address" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Value="_deviceAdminPutRequest.PowerControlType" Label="Power control type" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    if (_deviceAdminPutRequest.Manufacturer != "")
                    {
                        foreach (DevicePowerControlType type in Enum.GetValues(typeof(DevicePowerControlType)))
                        {
                            <MudSelectItem Value="@type">@type</MudSelectItem>
                        }
                    }
                }
            </MudSelect>
            <MudSelect Class="my-2" @bind-Text="@_selectedSwitchPortName" @bind-Value="@_deviceAdminPutRequest.SwitchPortId" Label="Port type" Variant="Variant.Outlined" Margin="Margin.Dense">
                @foreach (var ethSwitch in _switches)
                {
                    foreach (var port in ethSwitch.Ports)
                    {
                        var portFullName = ethSwitch.Name + " (" + ethSwitch.Model + " / " + port.Number + ")";
                        <MudSelectItem Value="@port.Id">@portFullName</MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Class="my-2" @bind-Text="@_selectedConsoleName" @bind-Value="@_deviceAdminPutRequest.ConsoleId" Label="Console" Variant="Variant.Outlined" Margin="Margin.Dense">
                @foreach (var console in _consoles)
                {
                    <MudSelectItem Value="@((Guid?)console.Id)"> @(console.Type + ": " + console.Name)</MudSelectItem>
                }
            </MudSelect>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public DeviceAdminResponse Device { get; set; } = new DeviceAdminResponse();

    private DeviceAdminPutRequest _deviceAdminPutRequest;
    private List<SwitchAdminResponse> _switches = new List<SwitchAdminResponse>();
    private List<AdminDbConsoleDto> _consoles = new List<AdminDbConsoleDto>();
    private string _selectedSwitchPortName = "";
    private string _selectedConsoleName = "";
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        _deviceAdminPutRequest = new DeviceAdminPutRequest
        {
            Name = Device.Name,
            Model = Device.Model,
            Manufacturer = Device.Manufacturer,
            Serial = Device.Serial,
            MacAddress = Device.MacAddress,
            SwitchPortId = Device.SwitchPortId,
            PowerControlType = Device.PowerControlType
        };

        await GetSwitches();
        await GetConsoles();
        SetupCurrentSwitchPortName();
        SetupCurrentConsoleName();
    }

    private void SetupCurrentSwitchPortName()
    {
        var ethSwitch = _switches.Where(s => s.Ports.Any(p => p.Id == Device.SwitchPortId)).FirstOrDefault();
        if (ethSwitch != null)
        {
            _selectedSwitchPortName = ethSwitch.Name + " (" + ethSwitch.Model + " / " + ethSwitch.Ports.Find(p => p.Id == Device.SwitchPortId)?.Number + ")";
        }
    }
    
    private void SetupCurrentConsoleName()
    {
        var console = _consoles.FirstOrDefault(s => s.Id == Device.ConsoleId);
        if (console != null)
        {
            _selectedConsoleName = console.Type + ": " + console.Name;
        }
    }
    
    private async Task GetSwitches()
    {
        await _httpClient.Get<List<SwitchAdminResponse>>("api/admin/switches/",
            async response =>
            {
                await Task.Run(() => _switches = response.Data);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
    
    private async Task GetConsoles()
    {
        await _httpClient.Get<List<AdminDbConsoleDto>>("api/admin/consoles/",
            async response =>
            {
                await Task.Run(() => _consoles = response.Data);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }

    private async void Update()
    {
        await _httpClient.Put<DeviceAdminPutRequest>("api/admin/devices/" + Device.Id, _deviceAdminPutRequest,
            async _ =>
            {
                await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
}
