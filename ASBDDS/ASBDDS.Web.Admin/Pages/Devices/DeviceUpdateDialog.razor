@using ASBDDS.Shared.Models.Requests
@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Helpers
@using Newtonsoft.Json
@using System.Text
@inject HttpClient httpClient

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@deviceAdminPutRequest.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Value="@deviceAdminPutRequest.Manufacturer" Label="Manufacturer" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    var deviceHelper = new DeviceHelper();
                    foreach (var manufacturer in deviceHelper.GetManufacturers())
                    {
                        <MudSelectItem Value="@deviceHelper.GetManufacturer(manufacturer)"></MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Class="my-2" @bind-Value="@deviceAdminPutRequest.Model" Label="Model" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    if (deviceAdminPutRequest.Manufacturer != "")
                    {
                        var deviceHelper = new DeviceHelper();
                        var models = deviceHelper.GetModels(deviceAdminPutRequest.Manufacturer);
                        foreach (var model in models)
                        {
                            var modelName = deviceHelper.GetModel(model);
                            <MudSelectItem Value="@modelName"></MudSelectItem>
                        }
                    }
                }
            </MudSelect>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@deviceAdminPutRequest.Serial" Label="Serial" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@deviceAdminPutRequest.MacAddress" Label="Mac Address" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Text="@selectedSwitchPortName" @bind-Value="@deviceAdminPutRequest.SwitchPortId" Label="Port type" Variant="Variant.Outlined" Margin="Margin.Dense">
                @foreach (var _switch in switches)
                {
                    foreach (var port in _switch.Ports)
                    {
                        var portFullName = _switch.Name + " (" + _switch.Model + " / " + port.Number + ")";
                        <MudSelectItem Value="@port.Id">@portFullName</MudSelectItem>
                    }
                }
                @if (Guid.Empty != deviceAdminPutRequest.SwitchPortId)
                {

                }
            </MudSelect>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public DeviceAdminResponse _device { get; set; } = new DeviceAdminResponse();

    private DeviceAdminPutRequest deviceAdminPutRequest;
    private DeviceAdminResponse deviceAdminResponse;
    private Task<HttpResponseMessage> httpResp;
    private List<SwitchAdminResponse> switches = new List<SwitchAdminResponse>();
    private string selectedSwitchPortName = "";

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        deviceAdminPutRequest = new DeviceAdminPutRequest();

        deviceAdminPutRequest.Name = _device.Name;
        deviceAdminPutRequest.Model = _device.Model;
        deviceAdminPutRequest.Manufacturer = _device.Manufacturer;
        deviceAdminPutRequest.Serial = _device.Serial;
        deviceAdminPutRequest.MacAddress = _device.MacAddress;
        deviceAdminPutRequest.SwitchPortId = _device.SwitchPortId;

        var responseBody = await httpClient.GetFromJsonAsync<ApiResponse<List<SwitchAdminResponse>>>("api/admin/switches/");
        switches = responseBody.Data;
        var @switch = switches.Where(s => s.Ports.Any(p => p.Id == _device.SwitchPortId)).FirstOrDefault();
        if (@switch != null)
        {
            selectedSwitchPortName = @switch.Name + " (" + @switch.Model + " / " + @switch.Ports.Find(p => p.Id == _device.SwitchPortId).Number + ")";
        }
    }

    private async void CreateCallback()
    {
        var res = httpResp.Result;
        var bodyStr = await res.Content.ReadAsStringAsync();
        var respBodyObj = JsonConvert.DeserializeObject<ApiResponse<DeviceAdminPutRequest>>(bodyStr);
        if (res.IsSuccessStatusCode && respBodyObj.Status.Code == 0)
        {

        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Update()
    {
        var httpRequest = new HttpRequestMessage(HttpMethod.Put, "api/admin/devices/" + _device.Id);
        var json = JsonConvert.SerializeObject(deviceAdminPutRequest);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        httpRequest.Content = data;

        httpResp = httpClient.SendAsync(httpRequest);
        httpResp.ContinueWith(p => CreateCallback());
    }
}
