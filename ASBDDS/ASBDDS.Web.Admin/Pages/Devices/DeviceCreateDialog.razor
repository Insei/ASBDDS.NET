@using ASBDDS.Shared.Models.Requests
@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Models.Database.DataDb
@using Newtonsoft.Json
@using ASBDDS.Shared.Helpers
@using System.Text
@inject IHttpService httpClient

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_deviceAdminPostRequest.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudDivider Class="mt-2 mb-1" />
            <MudSelect Class="my-2" @bind-Value="@_deviceAdminPostRequest.Manufacturer" Label="Manufacturer" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    var deviceHelper = new DeviceHelper();
                    foreach (var manufacturer in deviceHelper.GetManufacturers())
                    {
                        <MudSelectItem Value="@deviceHelper.GetManufacturer(manufacturer)"></MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Class="my-2" @bind-Value="@_deviceAdminPostRequest.Model" Label="Model" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    if (_deviceAdminPostRequest.Manufacturer != "")
                    {
                        var deviceHelper = new DeviceHelper();
                        var models = deviceHelper.GetModels(_deviceAdminPostRequest.Manufacturer);
                        foreach (var model in models)
                        {
                            var modelName = deviceHelper.GetModel(model);
                            <MudSelectItem Value="@modelName"></MudSelectItem>
                        }
                    }
                }
            </MudSelect>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_deviceAdminPostRequest.Serial" Label="Serial" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_deviceAdminPostRequest.MacAddress" Label="Mac Address" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Value="@_deviceAdminPostRequest.SwitchPortId" Label="Port type" Variant="Variant.Outlined" Margin="Margin.Dense">
                @foreach (var _switch in switches)
                {
                    foreach (var port in _switch.Ports)
                    {
                        var portFullName = _switch.Name + " (" + _switch.Model + " / " + port.Number + ")";
                        <MudSelectItem Value="@port.Id">@portFullName</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Create">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private DeviceAdminPostRequest _deviceAdminPostRequest;
    private DeviceAdminResponse deviceAdminResponse;
    private Task<HttpResponseMessage> httpResp;
    private List<SwitchAdminResponse> switches = new List<SwitchAdminResponse>();
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        _deviceAdminPostRequest = new DeviceAdminPostRequest();

        var responseBody = await httpClient.Get<ApiResponse<List<SwitchAdminResponse>>>("api/admin/switches/");
        switches = responseBody.Data;
    }

    private async void Create()
    {
        var apiResp = await httpClient.Post<ApiResponse<DeviceAdminPostRequest>>("api/admin/devices", _deviceAdminPostRequest);
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if(apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
            MudDialog.Close(DialogResult.Ok(true));
    }
}
