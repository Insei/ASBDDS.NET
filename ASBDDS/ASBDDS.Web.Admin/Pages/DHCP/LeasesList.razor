@page "/leases"
@using System.Net.Http.Json
@using ASBDDS.Shared.Models.Responses
@inject IHttpService _httpClient
@inject IDialogService _dialogService

<MudTable Items="@_leases" Dense="@_dense" Hover="@_hover" Loading="@_loading" Bordered="@_bordered" Striped="@_striped" Filter="new Func<DHCPLeaseAdminResponse,bool>(FilterFunc1)" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">DHCP Leases List</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@ShowCreateDialog" aria-label="add"></MudIconButton>
        <MudText Class="small">Add Static Lease</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>IP</MudTh>
        <MudTh>Mac address</MudTh>
        <MudTh>Static</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Start">@context.Start</MudTd>
        <MudTd DataLabel="End">@context.End</MudTd>
        <MudTd DataLabel="IP">@context.IP</MudTd>
        <MudTd DataLabel="Mac address">@context.MacAddress</MudTd>
        <MudTd DataLabel="Static">@context.Static</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd Style="white-space: nowrap; width: 1%;" DataLabel="Options">
            <MudMenu Label="Options" Size="Size.Small" Dense="true" FullWidth="true" Direction="Direction.Start">
                <MudMenuItem Disabled="@context.Static" OnClick="@(() => MakeStatic(context))">Make static</MudMenuItem>
                <MudMenuItem Disabled="@(!context.Static)" OnClick="@(() => MakeDynamic(context))">Make dynamic</MudMenuItem>
                <MudMenuItem Disabled="@(context.Static)" OnClick="@(() => Delete(context))">Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<SnackBars @ref="_snackBars"></SnackBars>

@code {
    private IEnumerable<DHCPLeaseAdminResponse> _leases = new List<DHCPLeaseAdminResponse>();
    private bool _loading;
    private bool _dense = true;
    private bool _hover = true;
    private bool _striped = true;
    private bool _bordered = true;
    private string _searchString = "";
    private DHCPLeaseAdminResponse _selectedItem = null;
    private SnackBars _snackBars;

    protected override async Task OnInitializedAsync()
    {
        await GetDataFromServer();
    }
    
    private async Task GetDataFromServer()
    {
        var apiResp = await _httpClient.Get<ApiResponse<List<DHCPLeaseAdminResponse>>>("api/admin/dhcp/leases");
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if (apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
        {
            _leases = apiResp.Data;
        }
    }

    private async Task MakeStatic(DHCPLeaseAdminResponse lease)
    {
        var apiResp = await _httpClient.Put<ApiResponse<List<DHCPLeaseAdminResponse>>>(
            "api/admin/dhcp/leases/" + lease.MacAddress + "/make-static?ip="+lease.IP, 
            null);
        
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if (apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
        {
            await GetDataFromServer();
            StateHasChanged();
        }
    }
    
    private async Task MakeDynamic(DHCPLeaseAdminResponse lease)
    {
        var apiResp = await _httpClient.Put<ApiResponse<List<DHCPLeaseAdminResponse>>>(
            "api/admin/dhcp/leases/" + lease.MacAddress + "/make-dynamic", 
            null);
        
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if (apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
        {
            await GetDataFromServer();
            StateHasChanged();
        }
    }

    private async Task Delete(DHCPLeaseAdminResponse lease)
    {
        var apiResp = await _httpClient.Delete<ApiResponse<List<DHCPLeaseAdminResponse>>>(
            "api/admin/dhcp/leases/" + lease.MacAddress, 
            null);
        
        if (apiResp == null || apiResp.Status.Code != 0)
        {
            if (apiResp != null)
                _snackBars.ShowError(apiResp.Status.Message);
            else
                _snackBars.ShowError("Unhandled error");
        }
        else
        {
            await GetDataFromServer();
            StateHasChanged();
        }
    }
    
    private async void ShowCreateDialog()
    {
        var dialog = _dialogService.Show<DHCPLeaseCreate>("Create DHCP Lease");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await GetDataFromServer();
            StateHasChanged();
        }
    }

    private bool FilterFunc1(DHCPLeaseAdminResponse lease) => FilterFunc(lease, _searchString);
    
    private bool FilterFunc(DHCPLeaseAdminResponse lease, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (lease.IP.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (lease.MacAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}