@using ASBDDS.Shared.Models.Requests
@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Helpers
@inject IHttpService _httpClient

<MudDialog  DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 600px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_projectAdminPostRequest.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            @* <MudItem xs="12"> *@
            @*     <MudTextField Class="my-2" @bind-Value="@_projectAdminPostRequest.AllowCustomBootloaders" Label="Allow Custom Boot Loaders" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField> *@
            @* </MudItem> *@
            @* <MudDivider Class="mt-2 mb-1" /> *@
            @* <MudItem xs="12"> *@
            @*     <MudTextField Class="my-2" @bind-Value="@_projectAdminPostRequest.DefaultVlan" Label="Default Vlan" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField> *@
            @* </MudItem> *@
            <MudDivider Class="mt-2 mb-1"/>
            <b>Devices limits</b>
            @foreach (var devLimit in _projectAdminPostRequest.ProjectDeviceLimits)
            {
            <MudItem xs="12" Class="d-flex flex-row">
                <MudSelect Class="my-2" @bind-Value="@devLimit.Manufacturer" Label="Manufacturer" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @{
                            var deviceHelper = new DeviceHelper();
                            foreach (var manufacturer in deviceHelper.GetManufacturers())
                            {
                            <MudSelectItem Value="@deviceHelper.GetManufacturer(manufacturer)"></MudSelectItem>
                            }
                    }
                </MudSelect>
                <MudSelect Class="my-2" @bind-Value="@devLimit.Model" Label="Model" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @{
                            if (devLimit.Manufacturer != "")
                            {
                                var deviceHelper = new DeviceHelper();
                                var models = deviceHelper.GetModels(devLimit.Manufacturer);
                                foreach (var model in models)
                                {
                                    var modelName = deviceHelper.GetModel(model);
                                <MudSelectItem Value="@modelName"></MudSelectItem>
                                }
                            }
                    }
                </MudSelect>
                <MudTextField Class="my-2" @bind-Value="@devLimit.Count" Label="Count" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-n1" OnClick="@(() => DeleteDevice(devLimit))" />
            </MudItem>
            }
            <MudIconButton Class="d-flex flex-row my-n1" Icon="@Icons.Material.Rounded.Add" OnClick="@AddDeviceLimit" Color="Color.Success" aria-label="add"></MudIconButton>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Create">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private ProjectAdminPostRequest _projectAdminPostRequest;
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        _projectAdminPostRequest = new ProjectAdminPostRequest
        {
            ProjectDeviceLimits = new List<DeviceLimitResponse>()
        };
    }

    private void AddDeviceLimit()
    {
        _projectAdminPostRequest.ProjectDeviceLimits.Add(new DeviceLimitResponse());
    }

    private void DeleteDevice(DeviceLimitResponse devLimit)
    {
        _projectAdminPostRequest.ProjectDeviceLimits.Remove(devLimit);
    }

    private async void Create()
    {
        await _httpClient.Post<ProjectAdminPostRequest>("api/admin/projects", _projectAdminPostRequest,
            async _ =>
            {
                await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
}
