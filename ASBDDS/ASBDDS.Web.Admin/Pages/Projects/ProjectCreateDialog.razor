@using ASBDDS.Shared.Models.Requests
@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Models.Database.DataDb
@using Newtonsoft.Json
@using ASBDDS.Shared.Helpers
@using System.Text
@inject HttpClient httpClient

<MudDialog  DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 600px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@projectAdminPostRequest.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@projectAdminPostRequest.AllowCustomBootloaders" Label="Allow Custom Boot Loaders" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudDivider Class="mt-2 mb-1" />
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@projectAdminPostRequest.DefaultVlan" Label="Default Vlan" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudDivider Class="mt-2 mb-1"/>
            <b>Devices limits</b>
            @foreach (var devLimit in projectAdminPostRequest.ProjectDeviceLimits)
            {
                <MudItem xs="12" Class="d-flex flex-row">
                    <MudTextField Class="mr-1" @bind-Value="@devLimit.Manufacturer" Label="Manufacturer" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField Class="mr-1" @bind-Value="@devLimit.Model" Label="Model" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudTextField Class="mr-1" @bind-Value="@devLimit.Count" Label="Count" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="ma-n1" OnClick="@(() => DeleteDevice(devLimit))"/>
                </MudItem>
            }
            <MudIconButton Class="d-flex flex-row my-n1" Icon="@Icons.Material.Rounded.Add" OnClick="@AddPort" Color="Color.Success" aria-label="add"></MudIconButton>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Create">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private ProjectAdminPostRequest projectAdminPostRequest;
    private ProjectAdminResponse projectAdminResponse;
    private Task<HttpResponseMessage> httpResp;
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        projectAdminPostRequest = new ProjectAdminPostRequest();
        projectAdminPostRequest.ProjectDeviceLimits = new List<DeviceLimitResponse>();
    }

    private void AddPort()
    {
        projectAdminPostRequest.ProjectDeviceLimits.Add(new DeviceLimitResponse());
    }

    private void DeleteDevice(DeviceLimitResponse devLimit)
    {
        projectAdminPostRequest.ProjectDeviceLimits.Remove(devLimit);
    }

    private async void CreateCallback()
    {
        var res = httpResp.Result;
        var bodyStr = await res.Content.ReadAsStringAsync();
        var respBodyObj = JsonConvert.DeserializeObject<ApiResponse<ProjectAdminPostRequest>>(bodyStr);
        if (respBodyObj.Status.Code != 0)
        {
            _snackBars.ShowError(respBodyObj.Status.Message);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Create()
    {
        var httpRequest = new HttpRequestMessage(HttpMethod.Post, "api/admin/projects");
        var json = JsonConvert.SerializeObject(projectAdminPostRequest);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        httpRequest.Content = data;

        httpResp = httpClient.SendAsync(httpRequest);
        httpResp.ContinueWith(p => CreateCallback());
    }
}
