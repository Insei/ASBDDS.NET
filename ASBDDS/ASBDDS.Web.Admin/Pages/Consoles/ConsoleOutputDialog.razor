@using ASBDDS.Shared.Dtos.DbConsole
@using ASBDDS.Shared.Dtos.SerialPortSettings
@using Microsoft.AspNetCore.Components
@using ASBDDS.Shared.Dtos
@inject IHttpService _httpClient
@inject IDialogService _dialogService
@inject IJSRuntime _js

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudTable Items="@_output" Dense="@true" Loading="@_loading" Hover="@true" Height="350px" Breakpoint="Breakpoint.Sm" Virtualize="true" FixedHeader="true">
            <HeaderContent>
                <MudTh>Message</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Message">@context.Text</MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => UpdateData(true))">Update</MudButton>
        <MudButton Color="Color.Primary" OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>

@code {
    private IEnumerable<ConsoleOutputDto> _output = new List<ConsoleOutputDto>();
    private bool _loading;

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    [Parameter] public AdminDbConsoleDto DbConsoleDto { get; set; } = new AdminDbConsoleDto() {SerialSettings = new AdminSerialPortSettingsDto() };

    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    private async Task<int> UpdateData(bool stateHasChanged = false)
    {
        _loading = true;
        await _httpClient.Get<List<ConsoleOutputDto>>("api/admin/consoles/" + DbConsoleDto.Id + "/output",
            async response =>
            {
                await Task.Run(() => 
                        _output = response.Data.Select(o => new ConsoleOutputDto(){DateUtc = o.DateUtc.ToLocalTime(), Text = o.Text}
                    ));
            }, async response =>
            {
                await Task.Run(() => _snackBars.ShowError(response.Status.Message));
            });
        
        _loading = false;
        if(stateHasChanged)
            StateHasChanged();
        
        return 0;
    }

    protected override async void OnInitialized()
    {
        await UpdateData(true);
    }
}