@using ASBDDS.Shared.Models.Responses
@using ASBDDS.Shared.Dtos.DbConsole
@using ASBDDS.Shared.Dtos.SerialPortSettings
@using ASBDDS.Shared.Models.Database.DataDb
@inject IHttpService _httpClient

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_consoleUpdateDto.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Value="@_consoleUpdateDto.Type" Label="Type" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    foreach (var consoleType in (DbConsoleType[])Enum.GetValues(typeof(DbSerialPortStopBits)))
                    {
                        <MudSelectItem Value="@consoleType"></MudSelectItem>
                    }
                }
            </MudSelect>
            <MudCheckBox @bind-Checked="@_consoleUpdateDto.Disabled" Dense="false" Color="Color.Primary" Label="Disabled"></MudCheckBox>
            @if (_consoleUpdateDto.Type == DbConsoleType.Serial)
            {
                <MudDivider Class="mt-2 mb-1"></MudDivider>
                <b>Serial Settings</b>
                <MudItem xs="12">
                    <MudTextField Class="my-2" @bind-Value="@_consoleUpdateDto.SerialSettings.PortName" Label="Port name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Class="my-2" @bind-Value="@_consoleUpdateDto.SerialSettings.BaudRate" Label="Baud rate" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Class="my-2" @bind-Value="@_consoleUpdateDto.SerialSettings.DataBits" Label="Data bits" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudSelect Class="my-2" @bind-Value="@_consoleUpdateDto.SerialSettings.StopBits" Label="Stop bits" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @{
                        foreach (var stopBit in (DbSerialPortStopBits[])Enum.GetValues(typeof(DbSerialPortStopBits)))
                        {
                            <MudSelectItem Value="@stopBit"></MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudSelect Class="my-2" @bind-Value="@_consoleUpdateDto.SerialSettings.Parity" Label="Parity" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @{
                        foreach (var parity in (DbSerialPortParity[])Enum.GetValues(typeof(DbSerialPortParity)))
                        {
                            <MudSelectItem Value="@parity"></MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudSelect Class="my-2" @bind-Value="@_consoleUpdateDto.SerialSettings.Handshake" Label="Parity" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @{
                        foreach (var handshake in (DbSerialPortHandshake[])Enum.GetValues(typeof(DbSerialPortHandshake)))
                        {
                            <MudSelectItem Value="@handshake"></MudSelectItem>
                        }
                    }
                </MudSelect>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Update</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
@code {

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    [Parameter] public AdminDbConsoleDto DbConsoleDto { get; set; } = new AdminDbConsoleDto() {SerialSettings = new AdminSerialPortSettingsDto() };

    private AdminDbConsoleUpdateDto _consoleUpdateDto;

    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        var dbc = DbConsoleDto;
        var dbcss = DbConsoleDto.SerialSettings;
        
        _consoleUpdateDto = new AdminDbConsoleUpdateDto
        {
            Name = dbc.Name,
            Type = dbc.Type,
            Disabled = dbc.Disabled,
            SerialSettings =
            new AdminSerialPortSettingsUpdateDto() {
                Handshake = dbcss.Handshake,
                Parity = dbcss.Parity,
                BaudRate = dbcss.BaudRate,
                PortName = dbcss.PortName,
                DataBits = dbcss.DataBits,
                StopBits = dbcss.StopBits
            }
        };
    }
    
    private async void Update()
    {
       
        var apiResp = await _httpClient.Put<AdminDbConsoleDto>("api/admin/consoles/" + DbConsoleDto.Id, _consoleUpdateDto,
            async _ =>
            {
                await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
}