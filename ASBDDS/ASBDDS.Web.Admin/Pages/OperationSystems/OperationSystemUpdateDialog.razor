@using ASBDDS.Shared.Dtos.OperationSystem
@using ASBDDS.Shared.Dtos.File
@using ASBDDS.Shared.Models.Database.DataDb
@using ASBDDS.Web.Shared
@inject IHttpService _httpClient

<MudDialog  DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 600px; overflow-y: scroll">
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_osUpdateDto.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_osUpdateDto.Version" Label="Version" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_osUpdateDto.Arch" Label="Arch" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_osUpdateDto.InstallationBootFile" Label="Installation boot file" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudSelect Class="my-2" @bind-Value="@_osUpdateDto.InstallationProtocol" Label="Installation protocol" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    foreach (var bootProtocol in (DeviceBootProtocol[])Enum.GetValues(typeof(DeviceBootProtocol)))
                    {
                        <MudSelectItem Value="@bootProtocol"></MudSelectItem>
                    }
                }
            </MudSelect>
            <MudSelect Class="my-2" @bind-Value="@_osUpdateDto.Protocol" Label="Boot protocol" Variant="Variant.Outlined" Margin="Margin.Dense">
                @{
                    foreach (var bootProtocol in (DeviceBootProtocol[])Enum.GetValues(typeof(DeviceBootProtocol)))
                    {
                        <MudSelectItem Value="@bootProtocol"></MudSelectItem>
                    }
                }
            </MudSelect>
        </MudContainer>
        <MudDivider />
        <MudPaper>
            <MudText Class="my-2 px-4" Typo="@Typo.h6">Files:</MudText>
            <MudList>
            @foreach (var uploadFile in _filesForUpload)
            {
                <MudListItem @key="@uploadFile">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="ma-n1" OnClick="@(() => _filesForUpload.Remove(_filesForUpload.FirstOrDefault(f => f.Name == uploadFile.Name)))" />
                    @uploadFile.Name
                </MudListItem>
                <MudDivider />
            }
            @foreach (var sharedFile in _sharedOsFiles)
            {
                <MudListItem @key="@sharedFile">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="ma-n1" OnClick="@(() => { _filesForRemove.Add(sharedFile); _sharedOsFiles.Remove(sharedFile);})" />
                    @sharedFile.File.FullName 
                </MudListItem>
                <MudDivider />
            }
            </MudList>
            <MudIconButton HtmlTag="label"
                           Color="Color.Info"
                           Icon="@Icons.Material.Filled.Add"
                           for="fileInput">
            </MudIconButton>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Ok</MudButton>
    </DialogActions>
</MudDialog>
<SnackBars @ref="_snackBars"></SnackBars>
<InputFile id="fileInput" OnChange="AddFilesToUpload" hidden multiple />
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public OperationSystemDto OsDto { get; set; } = new OperationSystemDto();
    private List<SharedFileDto> _sharedOsFiles = new List<SharedFileDto>();
    private List<FileUploadModel> _filesForUpload = new List<FileUploadModel>();
    private List<SharedFileDto> _filesForRemove = new List<SharedFileDto>();

    private OperationSystemUpdateDto _osUpdateDto;
    private SnackBars _snackBars;

    void Cancel() => MudDialog.Cancel();

    protected override async void OnInitialized()
    {
        _osUpdateDto = new OperationSystemUpdateDto
        {
            Name = OsDto.Name,
            Version = OsDto.Version,
            Arch = OsDto.Arch,
            InstallationProtocol = OsDto.InstallationProtocol,
            Protocol = OsDto.Protocol,
            InstallationBootFile = OsDto.InstallationBootFile
        };
        await GetSharedOsFiles();
    }

    private async Task GetSharedOsFiles()
    {
        await _httpClient.Get<List<SharedFileDto>>("api/admin/os/" + OsDto.Id + "/files/", async response =>
        {
            await Task.Run(() => _sharedOsFiles = response.Data);
            StateHasChanged();
        }, async response =>
        {
            await _snackBars.ShowError(response.Status.Message);
        });
    }

    private async void Update()
    {
        await _httpClient.Put("api/admin/os/" + OsDto.Id, _osUpdateDto,
            async _ =>
            {
                await UploadFiles();
                await RemoveSharedOsFiles();
                await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
    private async Task RemoveSharedOsFiles()
    {
        foreach (var sharedOsFile in _filesForRemove)
        {
            
            await _httpClient.Delete("api/admin/os/" + OsDto.Id + "/files/" + sharedOsFile.Id, async _ =>
            {
                await _httpClient.Delete("api/files?ids=" + sharedOsFile.File.Id, null, 
                    response => throw new Exception(response.Status.Message));
            }, response => throw new Exception(response.Status.Message));
        }
    }

    private async Task UploadFiles()
    {
        if (_filesForUpload.Count == 0)
            return;
        await _httpClient.Post<List<FileInfoModelDto>>("api/files/", _filesForUpload, async fileUploadResp =>
        {
            foreach (var uploadedFile in fileUploadResp.Data)
            {
                var sharedFileCreateDto = new SharedFileCreateDto()
                {
                    FileId = uploadedFile.Id,
                };
                await _httpClient.Post("api/admin/os/" + OsDto.Id + "/files", sharedFileCreateDto, async _ =>
                {
                    await GetSharedOsFiles();
                }, async response =>
                {
                    await _snackBars.ShowError(response.Status.Message);
                });
            }
        }, async response =>
        {
            await _snackBars.ShowError(response.Status.Message);
        });
        _filesForUpload.Clear();
    }
    
    private void AddFilesToUpload(InputFileChangeEventArgs e)
    {
        _filesForUpload.AddRange(e.GetMultipleFiles().ToList().Select(f => new FileUploadModel(){ Name = f.Name, Stream = f.OpenReadStream(419430400)}));
    }
}
