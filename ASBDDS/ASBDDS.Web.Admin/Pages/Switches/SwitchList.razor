@page "/switches"
@using ASBDDS.Shared.Models.Responses
@inject IHttpService _httpClient
@inject IDialogService _dialogService

<MudTable Items="@_switches" Dense="@true" Hover="@true" Loading="@_loading" Bordered="@true" Striped="@true" Filter="new Func<SwitchAdminResponse,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Switches List</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@ShowCreateDialog" aria-label="add"></MudIconButton>
        <MudText Class="small">Add Switch</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Manufacturer</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Serial</MudTh>
        <MudTh>IP</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
        <MudTd DataLabel="Model">@context.Model</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Serial">@context.Serial</MudTd>
        <MudTd DataLabel="IP">@context.Ip</MudTd>
        <MudTd Style="white-space: nowrap; width: 1%;">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowPort(context.Id.ToString()))">
                @(_showPorts.GetValueOrDefault(context.Id.ToString())? "Hide" : "Show") Ports
            </MudButton>
        </MudTd>
        <MudTd Style="white-space: nowrap; width: 1%;" DataLabel="Options">
            <MudMenu Label="Options" Size="Size.Small" Dense="true" FullWidth="true" Direction="Direction.Start">
                <MudMenuItem OnClick="@(() => ShowUpdateDialog(context))">Edit</MudMenuItem>
                <MudMenuItem OnClick="@(() => DeleteSwitch(context))">Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (_showPorts.GetValueOrDefault(context.Id.ToString()))
        {
            <MudTr>
                <td colspan="6">
                    <MudCard Elevation="0">
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.Ports" Context="PortContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="1">
                                <ColGroup>
                                    <col />
                                    <col />
                                    <col />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Port ID</MudTh>
                                    <MudTh>Port Number</MudTh>
                                    <MudTh>Port Type</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="PortID">@PortContext.Id</MudTd>
                                    <MudTd DataLabel="PortNumber">@PortContext.Number</MudTd>
                                    <MudTd DataLabel="PortType">@PortContext.Type</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>

    <PagerContent>

        <MudTablePager>

        </MudTablePager>
    </PagerContent>
</MudTable>
<SnackBars @ref="_snackBars"></SnackBars>
@code {
    private bool _loading;
    private string _searchString = "";
    private SnackBars _snackBars;

    private IEnumerable<SwitchAdminResponse> _switches = new List<SwitchAdminResponse>();
    private readonly Dictionary<string, bool> _showPorts = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        await GetListDataFromServer();
    }

    private async Task GetListDataFromServer(bool stateHasChanged = false)
    {
        _loading = true;
        await _httpClient.Get<List<SwitchAdminResponse>>("api/admin/switches/",
            async response =>
            {
                await Task.Run(() =>
                {
                    _showPorts.Clear();
                    foreach (var element in response.Data)
                    {
                        _showPorts.Add(element.Id.ToString(), false);
                    }
                    _switches = response.Data;
                });
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });

        _loading = false;
        if (stateHasChanged)
            StateHasChanged();
    }

    private void ShowPort(string id)
    {
        _showPorts[id] = _showPorts[id] != true;
    }

    private async void ShowCreateDialog()
    {
        var dialog = _dialogService.Show<SwitchCreateDialog>("Create Switch");
        var result = await dialog.Result;
        if (result.Cancelled) return;
        await GetListDataFromServer(true);
    }

    private async void ShowUpdateDialog(SwitchAdminResponse @switch)
    {
        var parameters = new DialogParameters { ["Switch"] = @switch };
        var dialog = _dialogService.Show<SwitchUpdateDialog>("Edit Switch", parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        await GetListDataFromServer(true);
    }

    private async void DeleteSwitch(SwitchAdminResponse @switch)
    {
        var parameters = new DialogParameters {{"EntityName", "switch"}};
        var result = await _dialogService.Show<DeleteConfirmDialog>("Delete", parameters).Result;

        if (result.Cancelled) return;
        
        await _httpClient.Delete("api/admin/switches/" + @switch.Id,
            async _ =>
            {
                await GetListDataFromServer(true);
            }, async response =>
            {
                await _snackBars.ShowError(response.Status.Message);
            });
    }
    

    private bool FilterFunc(SwitchAdminResponse device)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (device.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Ip.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Serial.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Model.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (device.Manufacturer.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
