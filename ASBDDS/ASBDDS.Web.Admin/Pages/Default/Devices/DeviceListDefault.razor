@page "/test"
@using System.Net.Http.Json
@inject HttpClient httpClient

<MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<WeatherForecast,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Date</MudTd>
        <MudTd DataLabel="Sign">@context.TemperatureC</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Position">@context.TemperatureF</MudTd>
        <MudTd DataLabel="Molar mass">@context.Summary</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    private WeatherForecast selectedItem1 = null;
    private WeatherForecast selectedItem2 = null;
    private HashSet<WeatherForecast> selectedItems = new HashSet<WeatherForecast>();

    private IEnumerable<WeatherForecast> Elements = new List<WeatherForecast>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<WeatherForecast>>("api/WeatherForecast");
    }

    private bool FilterFunc1(WeatherForecast element) => FilterFunc(element, searchString1);
    private bool FilterFunc2(WeatherForecast element) => FilterFunc(element, searchString2);

    private bool FilterFunc(WeatherForecast element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }
}